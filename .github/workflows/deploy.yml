name: CI/CD Pipeline

on:
  push:
    branches:
      - master

env:
  APP_NAME: kubsu-app
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/kubsu-app:latest
  CONTAINER_PORT: 8105
  LOCAL_DB_PORT: 5433 

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - ${{ env.LOCAL_DB_PORT }}:5432
        env:
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_DB: kubsu
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Wait for Postgres service to be ready
      run: |
        until pg_isready -h localhost -p ${{ env.LOCAL_DB_PORT }}; do
          echo "Waiting for Postgres..."
          sleep 2
        done

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docker/requirements.txt


    - name: Set DATABASE_URL for tests
      run: echo "DATABASE_URL=postgresql+asyncpg://kubsu:kubsu@localhost:${{ env.LOCAL_DB_PORT }}/kubsu" >> $GITHUB_ENV

    - name: Run tests
      working-directory: docker
      run: |
        pytest tests --maxfail=1 --disable-warnings -q

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }} docker/

    - name: Push Docker image
      run: |
        docker push ${{ env.IMAGE_NAME }}

  deploy:
    needs: test_and_build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy to server
      run: |
        ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          docker pull ${{ env.IMAGE_NAME }}
          docker stop ${{ env.APP_NAME }} || true
          docker rm ${{ env.APP_NAME }} || true
          docker run -d --name ${{ env.APP_NAME }} -p 8105:8105 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            ${{ env.IMAGE_NAME }}
        EOF

